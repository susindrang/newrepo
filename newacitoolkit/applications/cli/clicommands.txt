Show the tenants or a specific tenant
show tenant [<tenant-name>]

Show the bridge domains, a specific bridge domain, or even a detailed view of the bridge domain(s)
fabric# show bridgedomain [<bd-name>] [detail]

Show the interfaces
fabric# show interface [detail]

Show the Contexts
fabric# show context

Show the Infrastructure Domains
fabric# show infradomains

Enter configuration mode
fabric# configure terminal

Create a tenant
fabric(config)# [no] tenant <tenant-name>

Switch to a tenant configuration mode (ala VDC)
fabric# switchto <tenant-name>
fabric-tenant# switchback

Create a Context and don't enforce contracts on it
fabric-tenant(config)# [no] context <context-name>
fabric-tenant(config-ctx)# [no] allow-all

Create a bridge domain and assign it to a context
fabric-tenant(config)# [no] bridgedomain <bd-name> 
fabric-tenant(config-bd)# [no] context <context-name>

Create a subnet under the bridge domain
fabric-tenant(config-bd)# [no] ip address <ip-address>/<masklength> [ name <subnet-name> ]

Create an application profile
fabric-tenant(config)# [no] app <app-profile-name>

Create an EPG and assign it to a bridge domain 
fabric-tenant(config-app)# [no] epg <epg-name>
fabric-tenant(config-epg)# [no] bridgedomain <bd-name>
fabric-tenant(config-epg)# [no] infradomain <domain-name>

Assign an EPG to an interface and optionally specify the encapsulation and segmentation id used
fabric-tenant(config)# interface <type> <pod>/<node>/<module>/<port>
fabric-tenant(config-if)# [no] epg <epg-name> [vlan <vlan-id> | vxlan <vnid> <mcast-addr> | nvgre <vsid>]

Configure a Contract (has an implicit deny any and default scope is context)
fabric-tenant(config)# [no] contract <contract-name>
fabric-tenant(config-contract)# [no] scope { app-profile | tenant | context | global }

fabric-tenant(config-contract)# [no] <sequence-number> permit <protocol>  [fragments]

fabric-tenant(config-contract)# [no] <sequence-number> permit tcp [from-port <operator> {port | protocol-port}] [to-port <operator> {port | protocol-port}][{+ | - } <flag-name>]

fabric-tenant(config-contract)# [no] <sequence-number> permit udp [from-port <operator> {port | protocol-port}] [to-port <operator> {port | protocol-port}]

fabric-tenant(config-contract)# [no] <sequence-number> permit ethertype <ethertype-number>

fabric-tenant(config-contract)# [no] <sequence-number> permit arp [request | response]

Apply a Contract between EPGs
fabric-tenant(config)# [no] epg <epg-name>
fabric-tenant(config-epg)# [no] provide <contract-name>

fabric(config)# [no] epg <epg-name>
fabric(config-epg)# [no] consume <contract-name>

Configure a taboo (has an implicit permit any and default scope is context )
fabric-tenant(config)# [no] taboo <taboo-name>
fabric-tenant(config-taboo)# [no] scope { app-profile | tenant | context | global }

fabric-tenant(config-taboo)# [no] <sequence-number> deny <protocol> [from-port <operator> {port | protocol-port}] [to-port <operator> {port | protocol-port}] [fragments]

fabric-tenant(config-taboo)# [no] <sequence-number> deny tcp [from-port <operator> {port | protocol-port}] [to-port <operator> {port | protocol-port}][fragments][{+ | - } <flag-name>]

fabric-tenant(config-taboo)# [no] <sequence-number> deny ethertype <ethertype-number>

fabric-tenant(config-taboo)# [no] <sequence-number> deny arp [request | response]

Apply a Taboo to an EPG
fabric(config)# [no] epg <epg-name>
fabric(config-epg)# [no] taboo <taboo-name>

Configure an OSPF Routing Instance
fabric(config)# [no] router ospf <context-name>
fabric(config-rtr)# [no] router-id <ipaddress> <node>
fabric(config-rtr)# [no] network <ipaddress> <mask> area <area-id>

Configure OSPF Routing on a Interface
fabric-tenant(config-if)# [no] ip address <ipaddress>/<mask>
fabric-tenant(config-if)# [no] ip router ospf <context-name> area <area-id>
fabric-tenant(config-if)# [no] ip ospf authentication message-digest
fabric-tenant(config-if)# [no] ip ospf message-digest-key <key-id> md5 <auth-key>
fabric-tenant(config-if)# [no] epg <epg-name> [vlan <vlan-id> | vxlan <vnid> <mcast-addr> | nvgre <vsid>]





